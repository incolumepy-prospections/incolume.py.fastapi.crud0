[tool.poetry]
name = "incolume-py-fastapi-crud0"
version = "0.12.0a1"
description = ""
authors = ["britodfbr <britodfbr@gmail.com>"]
license = "LICENSE"
readme = "README.md"
packages = [{include = "incolume"}, {include="examples"}]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = {extras = ["all"], version = "^0.95.0"}
fastapi-pagination = "^0.12.1"
uvicorn = "^0.21.1"
sqlalchemy = "^2.0.9"
psycopg2-binary = "^2.9.6"
dynaconf = "^3.1.12"
passlib = "^1.7.4"
python-jose = "^3.3.0"
python-multipart = "^0.0.6"
pyotp = "^2.8.0"
qrcode = "^7.4.2"


[tool.poetry.group.dev.dependencies]
pytest = "^7.3.0"
pytest-cov = "^4.0.0"
taskipy = "^1.10.4"
alembic = "^1.10.3"
black = "<23.3.0"
isort = "^5.12.0"
pydocstyle = "^6.3.0"
pylint = "^2.17.3"
flake8 = "^6.0.0"
tox = "<4.5.1"
mypy = "^1.2.0"
mypy-extensions = "^1.0.0"
safety = "^2.3.5"
deepdiff = "^6.3.0"


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
#log_format = '%(asctime)s %(levelname)s %(message)s'
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
addopts = "--doctest-modules --cov=incolume -sx --cov-report term-missing --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml"
testpaths = [
  "tests",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fast: marks tests as fast (deselect with '-m \"not fast\"')",
]

[tool.coverage.html]
directory = "coverage_report/html"

[tool.coverage.xml]

[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "ImportError",
  "ModuleNotFoundError",
  "__package__ =",
  "def run",
  "def terminal.",
  "__author__",
  "class IElements"
]

[tool.black]
line-length = 79
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
/(
  ^/foo.py    # exclude a file named foo.py in the root of the project
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | _build
  | buck-out
  | build
  | dist
  | docs
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
)/
'''

[tool.taskipy.tasks]
lint_black={help='Checking with black', cmd='poetry run black --check --diff incolume tests'}
lint_flake8={help='Checking with flake8', cmd='poetry run flake8 --config pyproject.toml incolume/ tests/'}
lint_isort={help='Checking with isort', cmd='poetry run isort --check --atomic --py all incolume/ tests/'}
lint_mypy={help='Checking with mypy', cmd='poetry run mypy --check incolume tests'}
lint_pydocstyle={help='Checking with pydocstyle', cmd='poetry run pydocstyle incolume/ tests/'}
lint_pylint={help='Checking with pylint', cmd=' poetry run pylint incolume/ tests/'}
pre_lint="task lint_black && task lint_isort && task lint_flake8 && task lint_mypy && task lint_pydocstyle && task lint_pylint"
lint={help='Checking all linters configurated', cmd=''}
prerelease={cmd='v=$(poetry version prerelease) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version prerelease'}
# pre_patch="poetry run task lint"
patch={cmd='v=$(poetry version patch) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version patch'}
preminor={cmd='v=$(poetry version preminor) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version preminor'}
premajor={cmd='v=$(poetry version premajor) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version premajor'}
